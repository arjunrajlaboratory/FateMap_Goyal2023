expt2Overlap = mouseSummary[4,4]
expt5Overlap = mouseSummary[6,4]
expt1Overlap
View(mouseSummary)
MeanOverlap = mean(expt1Overlap,expt2Overlap,expt5Overlap)
MeanOverlap
View(expt1Overlap)
MeanOverlap = mean(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4)
MeanOverlap
VarOverlap = var(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4)
VarOverlap
View(expt1Overlap)
View(expt2Overlap)
View(expt5Overlap)
expt5Overlap$V4
expt2Overlap$V4
mean(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4)
mean(2,3,4)
mean(0:10)
mean(1,2,3,4)
mean(c(1,2,3,4))
mean(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
MeanOverlap = mean(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
VarOverlap = var(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
VarOverlap
VarOverlap = sd(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
VarOverlap
std.error(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
sd(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))/sqrt(3)
MeanOverlap
randomSimulation = as_tibble(read.table(file = paste0(plotDirectory, "BCMouse_MemoryRandomExperimentalData.svg"), header = TRUE, stringsAsFactors=F, sep = "\t"))
View(randomSimulation)
randomSimulation = as_tibble(read.table(file = paste0(plotDirectory, "randomSimulation.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
View(randomSimulation)
MeanOverlapMouse = mean(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))
SEMOverlapMouse = sd(c(expt1Overlap$V4,expt2Overlap$V4,expt5Overlap$V4))/sqrt(3)
mean(randomSimulation$Percent.Overlap)
MeanOverlapSimulation = mean(randomSimulation$Percent.Overlap)
mean(100*randomSimulation$Percent.Overlap)
SEMOverlapSimulation = sd(100*randomSimulation$Percent.Overlap)/sqrt(200)
SEMOverlapSimulation
#####################NOTE#####################
#Cleaned up version of V1: /Users/yogesh/Dropbox (RajLab)/FateMap/data/10X/10X/2020_FM03/jointAnalysis/seurat/hg19/DOT1Lsample1Sample2_V1_hg19.R
##############################################
library(Seurat)
library(ggplot2)
library(tidyverse)
library(fuzzyjoin)
options(future.globals.maxSize = 4000 * 1024^2)
#########
# workflow adapted from https://satijalab.org/seurat/v3.0/integration.html
#########
home1Directory <-"/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/10X_SeuratObject/FM03/"
home2Directory <- '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/10X_BarcodeData/FM03/'
plot3Directory <- "/Users/yogesh/Dropbox (RajLab)/FateMap/paper/plotData/analysisPlots/"
create_lpr_theme <- function(){
lpr_theme <- ggplot2::theme_bw() + ggplot2::theme_classic() +
ggplot2::theme(text = ggplot2::element_text(size = 32),
plot.title = ggplot2::element_text(face = "bold",
hjust = 0.5, size = ggplot2::rel(0.5)), axis.text = ggplot2::element_text(size = ggplot2::rel(0.8),
color = "black", face = "bold"), axis.title = ggplot2::element_text(size = ggplot2::rel(0.6),
face = "bold"), legend.title = ggplot2::element_blank(),
legend.position = "bottom", axis.line = element_line(size = 2),
axis.ticks = element_line(size = 2), strip.background = element_rect(size = 2),
strip.text = element_text(size = ggplot2::rel(0.7),
face = "bold"))
return(lpr_theme)
}
umapCoordinates = as_tibble(read.table(file = paste0(home1Directory, "umapCoordinates_s1s2Scanorama_50pcs_filter_hg19.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
umapClusters = as_tibble(read.table(file = paste0(home1Directory, "umapClusters_s1s2Scanorama_50pcs_filter_hg19.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
barcode50 = as_tibble(read.table(paste0(home2Directory, 'stepThreeStarcodeShavedReads.txt'), stringsAsFactors=F, header = F))
barcode50 = barcode50  %>%
dplyr::rename(cellID = V1,
UMI = V2,
BC50StarcodeD8 = V4,
sampleNum = V8) %>%
select(-c(V3,V5,V6,V7)) %>% unique() %>% select(-UMI) %>% filter(sampleNum %in% c("1","2"))
umiCut = 15 # Minimum UMI cutoff for reliable analysis. For the past runs I used between 3-5 for ~500k reads/sample. Here we have ~1.5mil/sample
linCut = 1 # remove all the cases where one CellID is associated with X(one/two etc) barcodes.
upToLineageCounting = barcode50 %>%
group_by(cellID, BC50StarcodeD8, sampleNum) %>%
summarise(nUMI = length(sampleNum)) %>%
filter(nUMI >= umiCut) %>%
group_by(cellID) %>%
mutate(nLineages = length(cellID))
upToLineageCounting$sampleNum = sub("^", "S", upToLineageCounting$sampleNum)
#####
###taking only single cellid-->barcode mappings
linCountTooverlaps = upToLineageCounting %>%
ungroup() %>%
filter(nLineages <= linCut) %>%
unique()
rm(barcode50)
jointUMAP = inner_join(linCountTooverlaps, umapCoordinates, by = c("cellID", "sampleNum")) %>% select(-nLineages)
jointUMAPS1 = jointUMAPS %>% filter(sampleNum == "S1")
jointUMAPS2 = jointUMAPS %>% filter(sampleNum == "S2")
jointUMAPS1 = jointUMAP %>% filter(sampleNum == "S1")
jointUMAPS2 = jointUMAP %>% filter(sampleNum == "S2")
colonySizeAll = jointUMAP %>% group_by(BC50StarcodeD8,sampleNum) %>% summarise(nColony = length(BC50StarcodeD8))
colonySizeAll
colonySizeAll = jointUMAP %>% group_by(BC50StarcodeD8,sampleNum) %>% summarise(nColony = length(BC50StarcodeD8)) %>% filter(nColony >2)
colonySizeAll
colonySizeAllS1 = colonySizeAll %>% filter(sampleNum == "S1")
colonySizeAllS2 = colonySizeAll %>% filter(sampleNum == "S2")
colonySizeAllS1
colonySizeAllS2
colonySizeAll = jointUMAP %>% group_by(BC50StarcodeD8,sampleNum) %>% summarise(nColony = length(BC50StarcodeD8)) %>% filter(nColony >1)
colonySizeAllS1 = colonySizeAll %>% filter(sampleNum == "S1")
colonySizeAllS2 = colonySizeAll %>% filter(sampleNum == "S2")
colonySizeAllS1
colonySizeAllS2
umapClusters
jointUMAP
clustersBarcode = inner_join(umapClusters, jointUMAP, by = "cellID")
clustersBarcode
clustersBarcode = inner_join(umapClusters, jointUMAP, by = c("cellID","sampleNum")) %>% select(-nUMI, -UMAP_1, -UMAP_2)
clustersBarcode
colonySizeAllS1
clustersOnlyColoniesS1 = inner_join(clustersBarcode,colonySizeAllS1, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColoniesS1
clustersOnlyColoniesS2 = inner_join(clustersBarcode,colonySizeAllS2, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColoniesS2
View(clustersOnlyColoniesS1)
ggplot(clustersOnlyColoniesS1, aes(seurat_clusters)) +
geom_bar()
ggplot(clustersOnlyColoniesS2, aes(seurat_clusters)) +
geom_bar()
ggplot(clustersOnlyColoniesS1, aes(seurat_clusters/nrow(clustersOnlyColoniesS1))) +
geom_bar()
ggplot(clustersOnlyColoniesS1$seurat_clusters, aes(seurat_clusters)) +
geom_bar()
s1s2Scanorama <- readRDS(paste0(home1Directory,"s1s2_fm03_scanorama_50pcs_filter_MT30_hg19.rds"))
logNormalizedCounts = as_tibble(read.table(file = paste0(home1Directory, "logNormalizedCounts_s1s2Scanorama_50pcs_filterRound_hg19.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
ggplot(umapCoordinates, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes_string(color = logNormalizedCounts$DEPTOR), size = 1, shape = 16) +
scale_color_gradient(low = "gray93", high = "darkblue") +
create_lpr_theme() +
theme(legend.position = "bottom",
legend.title = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6), angle = 30),
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(color =  "Scaled\n Log UMI counts")
ggplot(umapCoordinates, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes_string(color = logNormalizedCounts$VCAM1), size = 1, shape = 16) +
scale_color_gradient(low = "gray93", high = "darkblue") +
create_lpr_theme() +
theme(legend.position = "bottom",
legend.title = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6), angle = 30),
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(color =  "Scaled\n Log UMI counts")
ggplot(umapCoordinates, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes_string(color = logNormalizedCounts$APOE), size = 1, shape = 16) +
scale_color_gradient(low = "gray93", high = "darkblue") +
create_lpr_theme() +
theme(legend.position = "bottom",
legend.title = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6), angle = 30),
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(color =  "Scaled\n Log UMI counts")
ggplot(clustersOnlyColoniesS1, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
clustersOnlyColoniesS2
clustersOnlyColonies = bind_rows(clustersOnlyColoniesS1,clustersOnlyColoniesS2)
ggplot(clustersOnlyColoniesS1, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1)
ggplot(clustersOnlyColonies, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1)
colonySizeAll = jointUMAP %>% group_by(BC50StarcodeD8,sampleNum) %>% summarise(nColony = length(BC50StarcodeD8)) %>% filter(nColony >3)
colonySizeAllS1 = colonySizeAll %>% filter(sampleNum == "S1")
colonySizeAllS2 = colonySizeAll %>% filter(sampleNum == "S2")
clustersBarcode = inner_join(umapClusters, jointUMAP, by = c("cellID","sampleNum")) %>% select(-nUMI, -UMAP_1, -UMAP_2)
clustersOnlyColoniesS1 = inner_join(clustersBarcode,colonySizeAllS1, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColoniesS2 = inner_join(clustersBarcode,colonySizeAllS2, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColonies = bind_rows(clustersOnlyColoniesS1,clustersOnlyColoniesS2)
ggplot(clustersOnlyColonies, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1)
colonySizeAll = jointUMAP %>% group_by(BC50StarcodeD8,sampleNum) %>% summarise(nColony = length(BC50StarcodeD8)) %>% filter(nColony >2)
colonySizeAllS1 = colonySizeAll %>% filter(sampleNum == "S1")
colonySizeAllS2 = colonySizeAll %>% filter(sampleNum == "S2")
clustersBarcode = inner_join(umapClusters, jointUMAP, by = c("cellID","sampleNum")) %>% select(-nUMI, -UMAP_1, -UMAP_2)
clustersOnlyColoniesS1 = inner_join(clustersBarcode,colonySizeAllS1, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColoniesS2 = inner_join(clustersBarcode,colonySizeAllS2, by = c("BC50StarcodeD8","sampleNum"))
clustersOnlyColonies = bind_rows(clustersOnlyColoniesS1,clustersOnlyColoniesS2)
ggplot(clustersOnlyColonies, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1)
ggplot(clustersOnlyColonies, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1) +
create_lpr_theme() + theme(legend.position = "none", strip.background = element_blank(),strip.text.x = element_blank())
plot <- ggplot(clustersOnlyColonies, aes(seurat_clusters)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
facet_wrap(~sampleNum, ncol = 1) +
create_lpr_theme() + theme(legend.position = "none", strip.background = element_blank(),strip.text.x = element_blank())
ggsave(plot, file = paste0(plot3Directory, 'FM03_colonyClusterCOmparisonDOT1LControl.svg'), width = 6, height = 5.321)
#####################NOTE#####################
#Cleaned up version of V1: /Users/yogesh/Dropbox (RajLab)/FateMap/data/RNASeq/20200205_RNASeq/Downstream_R_Analysis/TPM_Analysis.R
##############################################
####script to analyze/heatmap for fast vs slow invadig cells based on individual colonies
library(dplyr)
library(ggplot2)
library(gplots)
library(tidyverse)
library(RColorBrewer)
dataDirectory <- "/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/bulkRNASeq/"
home1Directory <-("/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/10X_SeuratObject/FM01/")
plotDirectory <- '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/plotData/analysisPlots/'
create_lpr_theme <- function(){
lpr_theme <- ggplot2::theme_bw() + ggplot2::theme_classic() +
ggplot2::theme(text = ggplot2::element_text(size = 32),
plot.title = ggplot2::element_text(face = "bold",
hjust = 0.5, size = ggplot2::rel(0.5)), axis.text = ggplot2::element_text(size = ggplot2::rel(0.8),
color = "black", face = "bold"), axis.title = ggplot2::element_text(size = ggplot2::rel(0.6),
face = "bold"), legend.title = ggplot2::element_blank(),
legend.position = "bottom", axis.line = element_line(size = 2),
axis.ticks = element_line(size = 2), strip.background = element_rect(size = 2),
strip.text = element_text(size = ggplot2::rel(0.7),
face = "bold"))
return(lpr_theme)
}
counts = as_tibble(read.table(file = paste0(dataDirectory,"deRandomized_BulkColonySeq_20200220_meltedData_hg19_normalizedRevised.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
counts1 = counts %>% dplyr::select(tpm, gene_name,Original)
countsFilter = counts1 %>% filter(Original %in% c("sample_38", "sample_40","sample_42","sample_43"))
countsFilter1 <- aggregate(countsFilter['tpm'], by=countsFilter[c('Original', 'gene_name')], sum) ##to get rid of same genes assigned multiple times from htseq
allCounts_rawCountsMatrixNew = unique(countsFilter1) %>%
spread(Original, tpm)
allCounts_rawCountsMatrixNew[is.na(allCounts_rawCountsMatrixNew)] <- 0
#Make gene_id the rowname: prevents losing the gene_id during column selection
row.names(allCounts_rawCountsMatrixNew) = allCounts_rawCountsMatrixNew$gene_name
allCounts_rawCountsMatrixNew$gene_name = NULL
#log of the matrix (1 added to avoid log(0) errors). Default log is log_e
logTPM <- log2(allCounts_rawCountsMatrixNew + 1)
#eliminate low tpm values: done by calculating sum across each row.
logTPM1 <- logTPM[!(rowSums(logTPM)<=3),]
var_genes <- apply(logTPM1, 1, var) ##variance
head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:200]
head(select_var)
highly_variable_lcpm <-  as.matrix(logTPM1[select_var,])
#create settings for color scaling
breaks = seq(-2,2, by = 0.05) #hard code scale from -2 to 2
col <- colorRampPalette(brewer.pal(n=10, "RdYlBu"))(length(breaks)) #set colors
col <- rev(col)
#plot
p1 <- pheatmap(highly_variable_lcpm, cluster_rows = T, cluster_cols = T,
angle_col = 45, fontsize_col = 7,fontsize_row = 7, scale = 'row',
color = col)
ggsave(p1, file = paste0(plotDirectory, 'bulk_FastSlow_Heatmap200Var.svg'), width = 4, height = 7)
###log2FC analysis
avgTPM = allCounts_rawCountsMatrixNew %>% rownames_to_column(var = "gene_name") %>%
mutate(avgSlow = (sample_38+sample_40)/2, avgFast = (sample_42+sample_43)/2) %>%
filter((avgFast+avgSlow)/2 > 10) %>% mutate(log2FC = log2((avgFast+1)/(avgSlow+1))) %>%
filter(log2FC >1.5| log2FC < -1.5)
s1s2_scTransform.markers = as_tibble(read.table(file = paste0(plotDirectory, "scTransformMarkers_snn06.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
s1s2_scTransform.markersSubset <- s1s2_scTransform.markers %>% filter(p_val_adj <0.05, avg_logFC>1)
geneList10X = as_tibble(unique(s1s2_scTransform.markersSubset$gene))
geneListBulk = as_tibble(unique(avgTPM$gene_name))
s1s2_scTransform.markersSubsetBulkSubset = s1s2_scTransform.markersSubset %>% filter(gene %in% geneListBulk$value)
avgTPMselect = avgTPM %>% filter(gene_name %in% geneList10X$value)
upRegulatedGeneList = avgTPMselect %>% filter(log2FC>1.5) %>% select(gene_name)
downRegulatedGeneList = avgTPMselect %>% filter(log2FC< -1.5) %>% select(gene_name)
testCoverageA = s1s2_scTransform.markersSubset %>% group_by(cluster) %>% summarise(fraction = (sum(gene %in% upRegulatedGeneList$gene_name))/(length(gene))) %>% mutate(normalizedFraction = fraction/(max(fraction)))
testCoverage2A = s1s2_scTransform.markersSubset %>% group_by(cluster) %>% summarise(fraction = (sum(gene %in% downRegulatedGeneList$gene_name))/(length(gene))) %>% mutate(normalizedFraction = fraction/(max(fraction)))
umapCoordinates = as_tibble(read.table(file = paste0(home1Directory, "umapCoordinatesSCT_S1S2_50pcs_filter.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
umapClusters = as_tibble(read.table(file = paste0(home1Directory, "umapClusters_s1s2Scanorama_50pcs_filter_snn0_6.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t")) %>% rename(cluster = seurat_clusters)
umapClustersFractionUp = inner_join(umapClusters,testCoverageA, by = "cluster" )
umapClustersFractionDown = inner_join(umapClusters,testCoverage2A, by = "cluster" )
ggplot(umapCoordinates, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes_string(color = umapClustersFractionUp$normalizedFraction), size = 1, shape = 16) +
scale_color_gradient(low = "gray93", high = "red4") +
create_lpr_theme() +
theme(legend.position = "bottom",
legend.title = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6), angle = 30),
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(color =  "Scaled\n Log UMI counts")
ggplot(umapCoordinates, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes_string(color = umapClustersFractionDown$normalizedFraction), size = 1, shape = 16) +
scale_color_gradient(low = "gray93", high = "red4") +
create_lpr_theme() +
theme(legend.position = "bottom",
legend.title = element_text(size = rel(0.6)),
legend.text = element_text(size = rel(0.6), angle = 30),
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(color =  "Scaled\n Log UMI counts")
testCoverageA = s1s2_scTransform.markersSubset %>% group_by(cluster) %>% summarise(fraction = (sum(gene %in% upRegulatedGeneList$gene_name))/(length(gene))) %>% mutate(normalizedFraction = fraction/(max(fraction)))
avgTPMselect
View(avgTPMselect)
View(downRegulatedGeneList)
View(avgTPMselect)
avgTPMselectFast = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC>0)
View(avgTPMselectFast)
avgTPMselectFast = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC>0)
write.table(upRegulatedGeneList, file=paste0(plotDirectory,'fastMigratingGeneList.tsv'), col.names = TRUE, sep='\t')
avgTPMselectSlow = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC<0)
write.table(upRegulatedGeneList, file=paste0(plotDirectory,'slowMigratingGeneList.tsv'), col.names = TRUE, sep='\t')
avgTPMselectFast = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC>0)
write.table(avgTPMselectFast, file=paste0(plotDirectory,'fastMigratingGeneList.tsv'), col.names = TRUE, sep='\t')
avgTPMselectSlow = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC<0)
write.table(avgTPMselectSlow, file=paste0(plotDirectory,'slowMigratingGeneList.tsv'), col.names = TRUE, sep='\t')
View(avgTPMselectSlow)
avgTPMselectSlow = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC<0) %>% mutate(log2FC = -log2FC)
View(avgTPMselectSlow)
avgTPMselectSlow = avgTPMselect %>% select(gene_name, log2FC) %>% filter(log2FC<0) %>% mutate(log2FC = -log2FC)
write.table(avgTPMselectSlow, file=paste0(plotDirectory,'slowMigratingGeneList.tsv'), col.names = TRUE, sep='\t')
View(avgTPMselectSlow)
avgTPMselectFast = as_tibble(read.table(file = paste0(plot3Directory, "avgTPMselectFast.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectSlow = as_tibble(read.table(file = paste0(plot3Directory, "avgTPMselectFast.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectFast = as_tibble(read.table(file = paste0(plotDirectory, "avgTPMselectFast.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectSlow = as_tibble(read.table(file = paste0(plotDirectory, "avgTPMselectFast.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectFast = as_tibble(read.table(file = paste0(plotDirectory, "fastMigratingGeneList.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectSlow = as_tibble(read.table(file = paste0(plotDirectory, "fslowMigratingGeneList.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectFast = as_tibble(read.table(file = paste0(plotDirectory, "fastMigratingGeneList.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
avgTPMselectSlow = as_tibble(read.table(file = paste0(plotDirectory, "slowMigratingGeneList.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
geneListAll = bind_rows(avgTPMselectFast, avgTPMselectSlow) %>% select(geneName) %>% unique()
View(avgTPMselectFast)
geneListAll = bind_rows(avgTPMselectFast, avgTPMselectSlow) %>% select(gene_name) %>% unique()
View(avgTPMselect)
avgTPMselectHeatMap = avgTPMselect %>% filter(-avgSlow, -avgFast, -log2FC)
avgTPMselectHeatMap = avgTPMselect %>% select(-avgSlow, -avgFast, -log2FC)
View(avgTPMselectHeatMap)
allTableSpread = as.matrix(avgTPMselectHeatMap[,2:5])
rownames(allTableSpread) = avgTPMselectHeatMap$geneName
allTableSpread <- t(allTableSpread)
breaks = seq(-2,2, by = 0.05) #hard code scale from -2 to 2
col <- colorRampPalette(brewer.pal(n=10, "RdYlBu"))(length(breaks)) #set colors
col <- rev(col)
pheatmap(allTableSpread, cluster_rows = T, cluster_cols = T,
angle_col = 90, fontsize_col = 4,fontsize_row = 4, scale = 'column',
color = col)
library(pheatmap)
pheatmap(allTableSpread, cluster_rows = T, cluster_cols = T,
angle_col = 90, fontsize_col = 4,fontsize_row = 4, scale = 'column',
color = col)
View(avgTPMselect)
p1 <- pheatmap(allTableSpread, cluster_rows = T, cluster_cols = T,
angle_col = 90, fontsize_col = 4,fontsize_row = 4, scale = 'column',
color = col)
ggsave(p1, file = paste0(plotDirectory, 'bulk_FastSlow_Heatmap.svg'), width = 14, height = 4)
allTableSpread
avgTPMselectHeatMap$geneName
avgTPMselect
avgTPMselectHeatMap = avgTPMselect %>% select(-avgSlow, -avgFast, -log2FC)
allTableSpread = as.matrix(avgTPMselectHeatMap[,2:5])
rownames(allTableSpread) = avgTPMselectHeatMap$gene_name
allTableSpread <- t(allTableSpread)
breaks = seq(-2,2, by = 0.05) #hard code scale from -2 to 2
col <- colorRampPalette(brewer.pal(n=10, "RdYlBu"))(length(breaks)) #set colors
col <- rev(col)
pheatmap(allTableSpread, cluster_rows = T, cluster_cols = T,
angle_col = 90, fontsize_col = 4,fontsize_row = 4, scale = 'column',
color = col)
ggsave(p1, file = paste0(plotDirectory, 'bulk_FastSlow_Heatmap.svg'), width = 14, height = 4)
p1 <- pheatmap(allTableSpread, cluster_rows = T, cluster_cols = T,
angle_col = 90, fontsize_col = 4,fontsize_row = 4, scale = 'column',
color = col)
ggsave(p1, file = paste0(plotDirectory, 'bulk_FastSlow_Heatmap.svg'), width = 14, height = 4)
View(avgTPMselect)
View(s1s2_scTransform.markersSubset)
load("/Volumes/GoogleDrive/My Drive/Northwestern/papers/JiangRevisions/plotScripts/deseqforgroup.RData")
#library prep####
library(rhdf5) # For hdf5 files from bootstraps.
library(tidyverse) # Provides helpful R packages for data science.
library(tximport) # How Kallisto results are brought into R.
library(biomaRt) #older versions may use ensembldb instead, below
#library(ensembldb) # Helps interface with ensembl.
library(EnsDb.Hsapiens.v86) # Human-specific database package.
library(beepr) # Surprise function, very necessary.
library(datapasta) #
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(pheatmap)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
#library prep####
library(rhdf5) # For hdf5 files from bootstraps.
library(tidyverse) # Provides helpful R packages for data science.
library(tximport) # How Kallisto results are brought into R.
library(biomaRt) #older versions may use ensembldb instead, below
#library(ensembldb) # Helps interface with ensembl.
library(EnsDb.Hsapiens.v86) # Human-specific database package.
library(beepr) # Surprise function, very necessary.
library(datapasta) #
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(pheatmap)
install.packages("rhdf5")
library(tidyverse)
library(reshape2)
library(ggridges)
sampleDir <- '/Volumes/GoogleDrive/My Drive/Northwestern/People/LabMembers/SubiaAhmed/PrelimAnalysis/analyzed/'
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
plotDirectory <- '/Volumes/GoogleDrive/My Drive/Northwestern/People/LabMembers/SubiaAhmed/PrelimAnalysis/plots/'
makeOverlapTable <- function(a,b){
rankList <- c(50, 100, 250, 500, 1000)
overlapTable <- data.frame(matrix(NA, nrow = 5, ncol = 5))
colnames(overlapTable) <-
c("A50", "A100", "A250", "A500", "A1000")
rownames(overlapTable) <-
c("B50", "B100", "B250", "B500", "B1000")
for (i in rankList) {
for (j in rankList) {
aTopTable <- top_n(a, i, V2)
bTopTable <- top_n(b, j, V2)
overlapTemp <- inner_join(aTopTable, bTopTable, by = "V1")
overlapVal <- nrow(overlapTemp) / min(nrow(aTopTable), nrow(bTopTable))
overlapTable[paste("B", i, sep = ""), paste("A", j, sep = "")] = round(overlapVal,3)
}
}
dfm <- melt(as.matrix(overlapTable))
table <- ggplot(dfm, aes(
x = Var2,
y = Var1,
label = value,
fill = value
)) +
geom_tile(show.legend = FALSE) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red4", limits = c(0, 1), midpoint = 0.5) +
geom_text(color = "black") +
#xlab("Top n Barcodes in A") +
#ylab("Top n Barcodes in B") +
theme_classic((base_size = 18)) + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = "black", size = 1), text=element_text(family="Helvetica"))
return(table)
}
sampleFolders
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
filterThreshold <- 10
aHIV <- sampleTables[[1]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
bHIV <- sampleTables[[2]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
cHIV <- sampleTables[[3]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
heritHIV <- full_join(aHIV,bHIV,by="V1") %>% replace(is.na(.),0)
heritCtrla <- full_join(aHIV,cHIV,by="V1") %>% replace(is.na(.),0)
heritCtrlb <- full_join(bHIV,cHIV,by="V1") %>% replace(is.na(.),0)
ggplot() +
geom_point(aes(x=heritHIV$V2.x,y=heritHIV$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("aHIV") + ylab("bHIV") +
theme_classic()
ggplot() +
geom_point(aes(x=heritHIV$V2.x,y=heritHIV$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("aHIV") + ylab("bHIV") +
xlim(16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritHIV$V2.x,y=heritHIV$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("aHIV") + ylab("bHIV") +
xlim(0,16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("aHIV") + ylab("bHIV") +
xlim(0,16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritCtrlb$V2.x,y=heritCtrlb$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("aHIV") + ylab("bHIV") +
xlim(0,16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("SotorasibA") + ylab("SotorasibA") +
xlim(0,16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("SotorasibA") + ylab("SotorasibB") +
xlim(0,16000) +
theme_classic()
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("SotorasibA") + ylab("SotorasibB") +
xlim(0,10000) +
theme_classic()
filterThreshold <- 40
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("SotorasibA") + ylab("SotorasibB") +
xlim(0,10000) +
theme_classic()
heritHIV <- full_join(aHIV,bHIV,by="V1") %>% replace(is.na(.),0)
heritCtrla <- full_join(aHIV,cHIV,by="V1") %>% replace(is.na(.),0)
heritCtrlb <- full_join(bHIV,cHIV,by="V1") %>% replace(is.na(.),0)
ggplot() +
geom_point(aes(x=heritCtrla$V2.x,y=heritCtrla$V2.y),alpha=0.5) +
geom_abline(slope=1,intercept=0) +
xlab("SotorasibA") + ylab("SotorasibB") +
xlim(0,10000) +
theme_classic()
