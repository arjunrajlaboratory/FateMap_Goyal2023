"Loss2" = rep(FALSE, cellNumber),
"Reprogram" = rep(FALSE, cellNumber)
)
#BARCODING
barcodes <- c(1:barcodeNumber)
sampledBarcodes <- sample(barcodes, cellNumber, replace = TRUE)
poissonCutoff <- 1 - dpois(0, MOI, log = FALSE)
barcodeIndex <- runif(cellNumber, 0, 1) < poissonCutoff
sampledBarcodes[barcodeIndex == FALSE] <- 0
initialCells$Barcode <- sampledBarcodes
#VARIABLE DIVISIONS
iterativeCells <- initialCells
for (j in 1:divisionNumber) {
sampledDaughters <-
round(rtnorm(nrow(iterativeCells), 2, 0.25, 0))  ###what is rtnorm? Why truncated normal distribution? and how were mean and sd decided?
# sampledDaughters <- round(rtnorm(nrow(iterativeCells), 1.75, 0.5, 0))
iterativeCells$Daughters <- sampledDaughters
iterativeCells <-
iterativeCells[rep(row.names(iterativeCells), iterativeCells$Daughters), 1:7]
}
#SPLITTING
splits <- c(1:splitNumber)
sampledSplits <-
sample(splits, nrow(iterativeCells), replace = TRUE)
iterativeCells$Split.ID <- sampledSplits
#PREDRUG LOSS
loss_predrug = cellcultureLoss + injectionLoss
lossIndex1 <- runif(nrow(iterativeCells), 0, 1) < loss_predrug
iterativeCells$Loss1 <- lossIndex1
finalCells <- filter(iterativeCells, Loss1 == FALSE)
#PLATE SPLITTING
plate1 <- filter(finalCells, Split.ID == 1)
plate2 <- filter(finalCells, Split.ID == 2)
#REPROGRAMMING
plate1Max <- round(nrow(plate1) * reprogEffic)
plate2Max <- round(nrow(plate2) * reprogEffic)
reprogIndex1 <- runif(nrow(plate1), 0, 1) < reprogEffic
plate1$Reprogram <- reprogIndex1
reprogIndex2 <- runif(nrow(plate2), 0, 1) < reprogEffic
plate2$Reprogram <- reprogIndex2
plate1ReprogSampled <- filter(plate1, Reprogram == TRUE)
plate2ReprogSampled <- filter(plate2, Reprogram == TRUE)
#POSTDRUG LOSS
loss_postdrug = tumorextractionLoss + dnaextractionLoss + libraryprepLoss
lossIndex21 <-
runif(nrow(plate1ReprogSampled), 0, 1) < loss_postdrug
plate1ReprogSampled$Loss2 <- lossIndex21
lossIndex22 <-
runif(nrow(plate2ReprogSampled), 0, 1) < loss_postdrug
plate2ReprogSampled$Loss2 <- lossIndex22
plate1 <- filter(plate1, Loss2 == FALSE)
plate2 <- filter(plate2, Loss2 == FALSE)
#OVERLAP ANALYSIS
plate1ReprogBarcodes <-
unique(select(filter(plate1, Barcode != 0, Reprogram == TRUE),
Barcode))
plate2ReprogBarcodes <-
unique(select(filter(plate2, Barcode != 0, Reprogram == TRUE),
Barcode))
if (nrow(union(plate1ReprogBarcodes, plate2ReprogBarcodes)) == 0) {
overlap <- 0
} else{
overlap <-
nrow(intersect(plate1ReprogBarcodes, plate2ReprogBarcodes)) / nrow(union(plate1ReprogBarcodes, plate2ReprogBarcodes))
}
results <- append(results, overlap)
toc()
}
View(results)
library(tidyverse)
library(reshape2)
library(ggridges)
homeDirectory = '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/gDNA_BarcodeData/mouseExpts/'
plotDirectory <- '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/plotData/analysisPlots/'
makeOverlapTable <- function(a,b){
rankList <- c(50, 100, 250, 500, 1000)
overlapTable <- data.frame(matrix(NA, nrow = 5, ncol = 5))
colnames(overlapTable) <-
c("A50", "A100", "A250", "A500", "A1000")
rownames(overlapTable) <-
c("B50", "B100", "B250", "B500", "B1000")
for (i in rankList) {
for (j in rankList) {
aTopTable <- top_n(a, i, V2)
bTopTable <- top_n(b, j, V2)
overlapTemp <- inner_join(aTopTable, bTopTable, by = "V1")
overlapVal <- nrow(overlapTemp) / min(nrow(aTopTable), nrow(bTopTable))
overlapTable[paste("B", i, sep = ""), paste("A", j, sep = "")] = round(overlapVal,3)
}
}
dfm <- melt(as.matrix(overlapTable))
table <- ggplot(dfm, aes(
x = Var2,
y = Var1,
label = value,
fill = value
)) +
geom_tile(show.legend = FALSE) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red4", limits = c(0, 1), midpoint = 0.5) +
geom_text(color = "black") +
#xlab("Top n Barcodes in A") +
#ylab("Top n Barcodes in B") +
theme_classic((base_size = 18)) + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = "black", size = 1), text=element_text(family="Helvetica"))
return(table)
}
cutoff = c(600, 800)
summary = matrix(, nrow = 3*length(cutoff), ncol = 7)
sampleDir <- paste0(homeDirectory, 'Expt1/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "305 (2)"
cond1 = "301 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
plot <- ggplot() +
geom_point(aes(x=overlapPLX$V2.x,y=overlapPLX$V2.y),alpha=0.4, size = 4, shape = 16) +
geom_point(aes(x=drugInd$V2.x,y=drugInd$V2.y),col="orange", size = 4, shape = 16) +
geom_point(aes(x=drugDepY$V2.x,y=drugDepY$V2.y),col="springgreen3", size = 4, shape = 16) +
geom_point(aes(x=drugDepX$V2.x,y=drugDepX$V2.y),col="turquoise3", size = 4, shape = 16) +
geom_abline(slope=1,intercept=0) +
xlab(paste0(cond1)) + ylab(paste0(cond2)) +
theme_classic((base_size = 36)) + theme(axis.line = element_line(colour = 'black', size = 2), axis.ticks = element_line(colour = "black", size = 2), text=element_text(family="Helvetica")) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank())
ggsave(plot = plot, file = paste0(plotDirectory, 'BCMouse_independence',cond1,'Vs', cond2,'cutoff_',cutoff[1],'.svg'), width = 8, height = 7)
summary[i,] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt1")
}
######
sampleDir <- paste0(homeDirectory, 'Expt2/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "306 (2)"
cond1 = "310 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
summary[i+1*length(cutoff),] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt2")
}
######
sampleDir <- paste0(homeDirectory, 'Expt4/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "324 (2)"
cond1 = "325 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
summary[i+3*length(cutoff),] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt5")
}
View(summary)
homeDirectory = '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/extractedData/gDNA_BarcodeData/mouseExpts/'
plotDirectory <- '/Users/yogesh/Dropbox (RajLab)/FateMap/paper/plotData/analysisPlots/'
makeOverlapTable <- function(a,b){
rankList <- c(50, 100, 250, 500, 1000)
overlapTable <- data.frame(matrix(NA, nrow = 5, ncol = 5))
colnames(overlapTable) <-
c("A50", "A100", "A250", "A500", "A1000")
rownames(overlapTable) <-
c("B50", "B100", "B250", "B500", "B1000")
for (i in rankList) {
for (j in rankList) {
aTopTable <- top_n(a, i, V2)
bTopTable <- top_n(b, j, V2)
overlapTemp <- inner_join(aTopTable, bTopTable, by = "V1")
overlapVal <- nrow(overlapTemp) / min(nrow(aTopTable), nrow(bTopTable))
overlapTable[paste("B", i, sep = ""), paste("A", j, sep = "")] = round(overlapVal,3)
}
}
dfm <- melt(as.matrix(overlapTable))
table <- ggplot(dfm, aes(
x = Var2,
y = Var1,
label = value,
fill = value
)) +
geom_tile(show.legend = FALSE) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red4", limits = c(0, 1), midpoint = 0.5) +
geom_text(color = "black") +
#xlab("Top n Barcodes in A") +
#ylab("Top n Barcodes in B") +
theme_classic((base_size = 18)) + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = "black", size = 1), text=element_text(family="Helvetica"))
return(table)
}
cutoff = c(600, 800)
summary = matrix(, nrow = 3*length(cutoff), ncol = 7)
sampleDir <- paste0(homeDirectory, 'Expt1/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "305 (2)"
cond1 = "301 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
plot <- ggplot() +
geom_point(aes(x=overlapPLX$V2.x,y=overlapPLX$V2.y),alpha=0.4, size = 4, shape = 16) +
geom_point(aes(x=drugInd$V2.x,y=drugInd$V2.y),col="orange", size = 4, shape = 16) +
geom_point(aes(x=drugDepY$V2.x,y=drugDepY$V2.y),col="springgreen3", size = 4, shape = 16) +
geom_point(aes(x=drugDepX$V2.x,y=drugDepX$V2.y),col="turquoise3", size = 4, shape = 16) +
geom_abline(slope=1,intercept=0) +
xlab(paste0(cond1)) + ylab(paste0(cond2)) +
theme_classic((base_size = 36)) + theme(axis.line = element_line(colour = 'black', size = 2), axis.ticks = element_line(colour = "black", size = 2), text=element_text(family="Helvetica")) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank())
ggsave(plot = plot, file = paste0(plotDirectory, 'BCMouse_independence',cond1,'Vs', cond2,'cutoff_',cutoff[i],'.svg'), width = 8, height = 7)
summary[i,] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt1")
}
######
sampleDir <- paste0(homeDirectory, 'Expt2/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "306 (2)"
cond1 = "310 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
summary[i+1*length(cutoff),] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt2")
}
######
sampleDir <- paste0(homeDirectory, 'Expt4/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "324 (2)"
cond1 = "325 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
summary[i+2*length(cutoff),] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt5")
}
View(summary)
sampleDir <- paste0(homeDirectory, 'Expt5/')
sampleFolders <- list.files(path=sampleDir,pattern='*d8.txt',recursive=TRUE)
sampleTables <- list(rep("NA",length(sampleFolders)))
for (i in 1:length(sampleFolders)) {
sampleTable = read.table(paste0(sampleDir, sampleFolders[i]), header = FALSE, sep = "\t")
sampleTables[[i]] <- sampleTable
}
###############################################################################################################################
###########################################DRUG DEPENDENT vs INDEPENDENT LINEAGES##############################################
cond2 = "324 (2)"
cond1 = "325 (1)"
filterThreshold <- 0
x = 1;
y = 2;
a <- sampleTables[[x]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
b <- sampleTables[[y]] %>% filter(.,V2>filterThreshold) %>% mutate(V2=V2/sum(V2)*(10^6))
overlapPLX <- full_join(a,b,by="V1") %>% replace(is.na(.),0) %>% mutate(V2.x=V2.x, V2.y=V2.y) %>% mutate(foldchange = log2((V2.y+1)/(V2.x+1))) %>% mutate(combo = V2.x + V2.y)
foldChangecutoff = 2.5
for (i in 1:length(cutoff)) {
drugDepX <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y<cutoff[i])
drugDepY <- overlapPLX %>% filter(foldchange < -foldChangecutoff | foldchange > foldChangecutoff) %>% filter(V2.y>cutoff[i] & V2.x<cutoff[i])
drugInd <- overlapPLX %>% filter(foldchange > -foldChangecutoff & foldchange < foldChangecutoff) %>% filter(V2.x>cutoff[i] & V2.y>cutoff[i])
summary[i+2*length(cutoff),] = c(nrow(drugDepX),nrow(drugDepY), nrow(drugInd), 100*(nrow(drugInd))/(nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), (nrow(drugInd) + nrow(drugDepY) + nrow(drugDepX)), cutoff[i], "Expt5")
}
View(summary)
write.table(summary, file=paste0(plotDirectory,'BCMouse_summaryTable.tsv'), col.names = TRUE, sep='\t')
mouseSummary = as_tibble(read.table(file = paste0(plotDirectory, "BCMouse_summaryTable.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
totalBarcodedCellsFraction = mean(0.48,0.47,0.47) #Expt 1,2,5
totalBarcodedCells =  totalBarcodedCellsFraction*cellNumber
survivingCellsTotal = mean(mouseSummary$V5[c(2,4,6)])
reprogEffic = survivingCellsTotal/totalBarcodedCells
mouseSummary = as_tibble(read.table(file = paste0(plotDirectory, "BCMouse_summaryTable.tsv"), header = TRUE, stringsAsFactors=F, sep = "\t"))
totalBarcodedCellsFraction = mean(0.48,0.47,0.47) #Expt 1,2,5
totalBarcodedCells =  totalBarcodedCellsFraction*cellNumber
cellNumber = 560000
totalBarcodedCells =  totalBarcodedCellsFraction*cellNumber
survivingCellsTotal = mean(mouseSummary$V5[c(2,4,6)])
reprogEffic = survivingCellsTotal/totalBarcodedCells
reprogEffic
cellNumber = 560000
barcodeNumber = 50000000
MOI = .655 #average rate of success NOT GFP+% (based on experimental data)
divisionNumber = 5
splitNumber = 5
cellcultureLoss = 0.05
injectionLoss = 0.15
tumorextractionLoss = 0.15
dnaextractionLoss = 0.1
libraryprepLoss = .05
repetitions = 200
barcodes <- c(1:barcodeNumber)
results <- list()
for (i in 1:repetitions) {
#SEEDING
tic(paste("repetition", i))
initialCells <-
data.frame(
"Cell ID" = 1:cellNumber,
"Barcode" = rep(0, cellNumber),
"Daughters" = rep(0, cellNumber),
"Split ID" = rep(0, cellNumber),
"Loss1" = rep(FALSE, cellNumber),
"Loss2" = rep(FALSE, cellNumber),
"Reprogram" = rep(FALSE, cellNumber)
)
#BARCODING
sampledBarcodes <- sample(barcodes, cellNumber, replace = TRUE)
poissonCutoff <- 1 - dpois(0, MOI, log = FALSE)
barcodeIndex <- runif(cellNumber, 0, 1) < poissonCutoff
sampledBarcodes[barcodeIndex == FALSE] <- 0
initialCells$Barcode <- sampledBarcodes
#VARIABLE DIVISIONS
iterativeCells <- initialCells
for (j in 1:divisionNumber) {
sampledDaughters <-
round(rtnorm(nrow(iterativeCells), 2, 0.25, 0))  ###what is rtnorm? Why truncated normal distribution? and how were mean and sd decided?
# sampledDaughters <- round(rtnorm(nrow(iterativeCells), 1.75, 0.5, 0))
iterativeCells$Daughters <- sampledDaughters
iterativeCells <-
iterativeCells[rep(row.names(iterativeCells), iterativeCells$Daughters), 1:7]
}
#SPLITTING
splits <- c(1:splitNumber)
sampledSplits <-
sample(splits, nrow(iterativeCells), replace = TRUE)
iterativeCells$Split.ID <- sampledSplits
#PREDRUG LOSS
loss_predrug = cellcultureLoss + injectionLoss
lossIndex1 <- runif(nrow(iterativeCells), 0, 1) < loss_predrug
iterativeCells$Loss1 <- lossIndex1
finalCells <- filter(iterativeCells, Loss1 == FALSE)
#PLATE SPLITTING
plate1 <- filter(finalCells, Split.ID == 1)
plate2 <- filter(finalCells, Split.ID == 2)
#REPROGRAMMING
plate1Max <- round(nrow(plate1) * reprogEffic)
plate2Max <- round(nrow(plate2) * reprogEffic)
reprogIndex1 <- runif(nrow(plate1), 0, 1) < reprogEffic
plate1$Reprogram <- reprogIndex1
reprogIndex2 <- runif(nrow(plate2), 0, 1) < reprogEffic
plate2$Reprogram <- reprogIndex2
plate1ReprogSampled <- filter(plate1, Reprogram == TRUE)
plate2ReprogSampled <- filter(plate2, Reprogram == TRUE)
#POSTDRUG LOSS
loss_postdrug = tumorextractionLoss + dnaextractionLoss + libraryprepLoss
lossIndex21 <-
runif(nrow(plate1ReprogSampled), 0, 1) < loss_postdrug
plate1ReprogSampled$Loss2 <- lossIndex21
lossIndex22 <-
runif(nrow(plate2ReprogSampled), 0, 1) < loss_postdrug
plate2ReprogSampled$Loss2 <- lossIndex22
plate1 <- filter(plate1, Loss2 == FALSE)
plate2 <- filter(plate2, Loss2 == FALSE)
#OVERLAP ANALYSIS
plate1ReprogBarcodes <-
unique(select(filter(plate1, Barcode != 0, Reprogram == TRUE),
Barcode))
plate2ReprogBarcodes <-
unique(select(filter(plate2, Barcode != 0, Reprogram == TRUE),
Barcode))
if (nrow(union(plate1ReprogBarcodes, plate2ReprogBarcodes)) == 0) {
overlap <- 0
} else{
overlap <-
nrow(intersect(plate1ReprogBarcodes, plate2ReprogBarcodes)) / nrow(union(plate1ReprogBarcodes, plate2ReprogBarcodes))
}
results <- append(results, overlap)
toc()
}
resultsMelt <- melt(results)
View(resultsMelt)
colnames(resultsMelt) <- c("Percent.Overlap","Heritability")
ggplot(resultsMelt) +
geom_boxplot(aes(x = Heritability, y = Percent.Overlap, fill = Heritability))
ggplot(resultsMelt, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.5) +theme_classic()
ggplot(resultsMelt, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic()
mouseSummary
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic() +
geom_vline(aes(xintercept=mouseSummary[2,4]),color="blue", size=1) +
geom_vline(aes(xintercept=summary[4,4]),color="blue", size=1) +
geom_vline(aes(xintercept=summary[6,4]),color="blue", size=1) +
theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic() +
geom_vline(aes(xintercept=mouseSummary[2,4]),color="blue", size=1) +
geom_vline(aes(xintercept=mouseSummary[4,4]),color="blue", size=1) +
geom_vline(aes(xintercept=mouseSummary[6,4]),color="blue", size=1) +
theme_classic()
mouseSummary[2,4]
mouseSummary[4,4]
mouseSummary[6,4]
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=mouseSummary[2,4]),color="blue", size=1) +
geom_vline(aes(xintercept=mouseSummary[4,4]),color="blue", size=1) +
geom_vline(aes(xintercept=mouseSummary[6,4]),color="blue", size=1) +
theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=mouseSummary[2,4]),color="blue", size=1)
mouseSummary
mouseSummary1 = data_frame(mouseSummary)
mouseSummary1
mouseSummary1 = unlist(mouseSummary)
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=mouseSummary1[2,4]),color="blue", size=1)
mouseSummary1
expt1Overlap = mouseSummary[2,4]
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap),color="blue", size=1)
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=2),color="blue", size=1)
expt1Overlap = mouseSummary[2,4]
expt1Overlap
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap$V4),color="blue", size=1)
expt1Overlap = mouseSummary[2,4]
expt2Overlap = mouseSummary[4,4]
expt5Overlap = mouseSummary[6,4]
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=1) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt2Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt5Overlap$V4),color="blue", size=1) +
theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.2) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt2Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt5Overlap$V4),color="blue", size=1) +
theme_classic()
ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt2Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt5Overlap$V4),color="blue", size=1) +
theme_classic()
plot = ggplot(resultsMelt*100, aes(x=Percent.Overlap)) + geom_histogram(binwidth=0.1) +theme_classic() +
geom_vline(aes(xintercept=expt1Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt2Overlap$V4),color="blue", size=1) +
geom_vline(aes(xintercept=expt5Overlap$V4),color="blue", size=1) +
theme_classic()
ggsave(plot, file = paste0(plotDirectory, 'BCMouse_MemoryRandomExperimentalData.svg'), width = 6, height = 4)
write.table(resultsMelt, file=paste0(plotDirectory,'randomSimulation.tsv'), col.names = TRUE, sep='\t')
